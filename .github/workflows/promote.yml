name: Promote

on:
  workflow_dispatch:
    inputs:
      target_stage:
        description: 'Target stage (DEV, QA, STAGING, PROD)'
        required: true
        type: choice
        default: 'PROD'
        options:
          - DEV
          - QA
          - STAGING
          - PROD
      application_version:
        description: 'Application version (SemVer). If empty, use latest.'
        required: false
        type: string
      DEMO_MODE:
        description: 'Enable demo mode (verbose logs, request tracing)'
        required: false
        default: 'false'
        type: choice
        options: ['false', 'true']

jobs:
  promote:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      id-token: write
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Apply DEMO_MODE settings
        if: ${{ inputs.DEMO_MODE == 'true' || env.DEMO_MODE == 'true' }}
        run: |
          echo "🔔 DEMO_MODE enabled"
          echo "ACTIONS_STEP_DEBUG=true" >> $GITHUB_ENV
          echo "ACTIONS_RUNNER_DEBUG=true" >> $GITHUB_ENV
          echo "HTTP_DEBUG_LEVEL=verbose" >> $GITHUB_ENV
          echo "BASH_XTRACE_ENABLED=1" >> $GITHUB_ENV
          echo "LOG_LEVEL=DEBUG" >> $GITHUB_ENV

      - name: Install prerequisites (jq)
        run: |
          sudo apt-get update -y
          sudo apt-get install -y jq

      - name: Setup JFrog CLI
        uses: jfrog/setup-jfrog-cli@v4
        env:
          JF_URL: ${{ vars.JFROG_URL }}
          JF_PROJECT: ${{ vars.PROJECT_KEY }}
        with:
          version: latest
          oidc-provider-name: bookverse-recommendations-github
          disable-job-summary: false
          oidc-audience: ${{ vars.JFROG_URL }}

      - name: Configure JFrog CLI (admin)
        run: |
          jf c add bookverse-admin --interactive=false --url "${{ vars.JFROG_URL }}" --access-token "${{ secrets.JFROG_ADMIN_TOKEN }}"
          jf c use bookverse-admin
          jf c show

      - name: Determine application and version
        id: app
        run: |
          set -euo pipefail
          SERVICE_NAME=recommendations
          APPLICATION_KEY="bookverse-$SERVICE_NAME"
          TARGET_STAGE='${{ inputs.target_stage }}'
          APP_VERSION='${{ inputs.application_version }}'
          if [ -z "$APP_VERSION" ]; then
            RESP=$(curl -sS -H "Authorization: Bearer ${{ secrets.JFROG_ADMIN_TOKEN }}" -H "Accept: application/json" \
              "${{ vars.JFROG_URL }}/apptrust/api/v1/applications/$APPLICATION_KEY/versions?limit=1&order_by=created&order_asc=false")
            APP_VERSION=$(echo "$RESP" | jq -r '.versions[0].version // empty')
          fi
          if [ -z "$APP_VERSION" ] || [ "$APP_VERSION" = "null" ]; then
            echo "❌ Could not determine app version for $APPLICATION_KEY" >&2
            exit 1
          fi
          echo "application_key=$APPLICATION_KEY" >> $GITHUB_OUTPUT
          echo "app_version=$APP_VERSION" >> $GITHUB_OUTPUT
          echo "target_stage=$TARGET_STAGE" >> $GITHUB_OUTPUT
          echo "Resolved: $APPLICATION_KEY@$APP_VERSION → $TARGET_STAGE"

      - name: Initialize AppTrust context
        run: |
          set -euo pipefail
          export APPLICATION_KEY='${{ steps.app.outputs.application_key }}'
          export APP_VERSION='${{ steps.app.outputs.app_version }}'
          export TARGET_STAGE='${{ steps.app.outputs.target_stage }}'
          echo "APPLICATION_KEY=${{ steps.app.outputs.application_key }}" >> $GITHUB_ENV
          echo "APP_VERSION=${{ steps.app.outputs.app_version }}" >> $GITHUB_ENV
          echo "TARGET_STAGE=${{ steps.app.outputs.target_stage }}" >> $GITHUB_ENV
          if [[ -n "${HTTP_DEBUG_LEVEL:-}" ]]; then :; else export HTTP_DEBUG_LEVEL=basic; fi
          export JFROG_URL="${{ vars.JFROG_URL }}"
          export PROJECT_KEY="${{ vars.PROJECT_KEY }}"
          export JFROG_ADMIN_TOKEN="${{ secrets.JFROG_ADMIN_TOKEN }}"
          source .github/scripts/promote_lib.sh
          fetch_summary
          echo "CURRENT_STAGE_BEFORE=${CURRENT_STAGE:-UNASSIGNED}" >> $GITHUB_ENV
          echo "RELEASE_STATUS_BEFORE=${RELEASE_STATUS:-UNKNOWN}" >> $GITHUB_ENV
          LC_FILE=$(mktemp)
          CODE=$(curl -sS -L -o "$LC_FILE" -w "%{http_code}" "$JFROG_URL/access/api/v2/lifecycle/?project_key=$PROJECT_KEY" -H "Authorization: Bearer $JFROG_ADMIN_TOKEN" -H "Accept: application/json" || echo 000)
          if [[ "$CODE" -lt 200 || "$CODE" -ge 300 ]]; then
            echo "❌ Failed to fetch lifecycles list for project '$PROJECT_KEY' (HTTP $CODE)" >&2
            print_request_debug "GET" "$JFROG_URL/access/api/v2/lifecycle/?project_key=$PROJECT_KEY"
            cat "$LC_FILE" || true
            rm -f "$LC_FILE"
            exit 1
          fi
          NORM_FILE=$(mktemp)
          jq -c 'if type=="array" then . elif has("lifecycles") then .lifecycles elif has("items") then .items elif has("results") then .results elif (has("name") and has("stages")) then [.] else [] end' "$LC_FILE" > "$NORM_FILE" 2>/dev/null || printf '[]' > "$NORM_FILE"
          rm -f "$LC_FILE"
          LIFECYCLE_NAME="${LIFECYCLE_NAME:-bookverse-lifecycle}"
          NAMES=$(jq -r --arg n "$LIFECYCLE_NAME" 'map(select(.name == $n)) | .[0].stages // [] | map(if type=="object" then .name else . end) | .[]' "$NORM_FILE" 2>/dev/null || true)
          RELEASE_STAGE=$(jq -r --arg n "$LIFECYCLE_NAME" '([ .[] | select(.name == $n) | .releaseStage ] | .[0]) // empty' "$NORM_FILE" 2>/dev/null || true)
          STAGES=(); while IFS= read -r orig; do [[ -z "$orig" ]] && continue; display=$(display_stage_for "$orig"); STAGES+=("$display"); done < <(printf "%s\n" "$NAMES")
          rm -f "$NORM_FILE"
          if [[ ${#STAGES[@]} -eq 0 ]]; then STAGES=(DEV QA STAGING PROD); fi
          if [[ -n "$RELEASE_STAGE" ]]; then FINAL_STAGE=$(display_stage_for "$RELEASE_STAGE"); else FINAL_STAGE="${STAGES[$((${#STAGES[@]}-1))]}"; fi
          echo "FINAL_STAGE=$FINAL_STAGE" >> $GITHUB_ENV
          STAGES_STR="${STAGES[*]}"; echo "STAGES_STR=$STAGES_STR" >> $GITHUB_ENV
          TARGET_NAME='${{ steps.app.outputs.target_stage }}'
          echo "TARGET_NAME=$TARGET_NAME" >> $GITHUB_ENV
          echo "PROMOTED_STAGES=" >> $GITHUB_ENV
          echo "DID_RELEASE=false" >> $GITHUB_ENV
          # Export original API stage identifiers for robust mapping in library
          for s in ${STAGES_STR}; do
            if [[ "$s" != "PROD" ]]; then
              api=$(api_stage_for "$s")
              echo "STAGE_${s}_ORIG=$api" >> $GITHUB_ENV
            fi
          done
          echo "ℹ️ Lifecycle stages: $STAGES_STR"
          echo "ℹ️ Target: $TARGET_NAME; Final: $FINAL_STAGE"

      - name: Promote from UNASSIGNED → next
        env:
          EVIDENCE_PRIVATE_KEY: ${{ secrets.EVIDENCE_PRIVATE_KEY }}
        run: |
          set -euo pipefail
          export JFROG_URL='${{ vars.JFROG_URL }}'
          export PROJECT_KEY='${{ vars.PROJECT_KEY }}'
          export JFROG_ADMIN_TOKEN='${{ secrets.JFROG_ADMIN_TOKEN }}'
          source .github/scripts/promote_lib.sh
          fetch_summary
          ALLOW_RELEASE=false
          advance_one_step

      - name: Promote iteratively up to target (no release)
        env:
          EVIDENCE_PRIVATE_KEY: ${{ secrets.EVIDENCE_PRIVATE_KEY }}
        run: |
          set -euo pipefail
          export JFROG_URL='${{ vars.JFROG_URL }}'
          export PROJECT_KEY='${{ vars.PROJECT_KEY }}'
          export JFROG_ADMIN_TOKEN='${{ secrets.JFROG_ADMIN_TOKEN }}'
          source .github/scripts/promote_lib.sh
          for i in 1 2 3 4; do
            fetch_summary
            PREV=$(display_stage_for "${CURRENT_STAGE:-UNASSIGNED}")
            echo "➡️ Iteration $i begin: stage=$PREV target=$TARGET_NAME final=$FINAL_STAGE stages=[$STAGES_STR]"
            if [[ "$PREV" == "$TARGET_NAME" ]]; then
              echo "Reached target stage ($TARGET_NAME); stopping."
              break
            fi
            ALLOW_RELEASE=false
            advance_one_step
            fetch_summary
            CURR=$(display_stage_for "${CURRENT_STAGE:-UNASSIGNED}")
            echo "➡️ Iteration $i result: $PREV -> $CURR"
            if [[ "$CURR" == "$PREV" ]]; then
              echo "No further non-release promotions possible; stopping."
              break
            fi
          done

      - name: Decide if STAGING evidence should attach
        id: decide-staging
        run: |
          set -euo pipefail
          PS="${PROMOTED_STAGES:-}"; CS="${CURRENT_STAGE:-}"; attach="false"
          if echo " $PS " | grep -q " STAGING "; then attach="true"; fi
          if [[ "$CS" == *"-STAGING" || "$CS" == "STAGING" ]]; then attach="true"; fi
          echo "attach=$attach" >> $GITHUB_OUTPUT

      - name: Prepare STAGING evidence templates (IaC, Pentest, Change Approval)
        if: ${{ steps.decide-staging.outputs.attach == 'true' }}
        run: |
          set -euo pipefail
          cat > iac-evidence.template.md <<'EOF'
          # Snyk IaC Scan

          **Scan Tool:** Snyk IaC  
          **Scan Date:** ${NOW_TS}  
          **Repository:** ${{ github.repository }}  
          **Commit:** ${{ github.sha }}

          ## Summary
          - Critical: 0
          - High: 1
          - Medium: 2
          - Low: 3

          > Infrastructure-as-Code configuration findings for STAGING gate.
          EOF
          cat > pentest-evidence.template.md <<'EOF'
          # Cobalt.io Pentest Summary

          **Engagement ID:** ${ENG_ID}  
          **Completed:** ${NOW_TS}

          ## Findings
          - Total: 1
          - Critical: 0
          - High: 0
          - Medium: 1
          - Low: 0

          > External penetration test summary attached for STAGING gate.
          EOF
          cat > change-approval.template.md <<'EOF'
          # ServiceNow Change Approval

          **Change ID:** ${CHG_ID}  
          **Status:** Approved  
          **Approved By:** ${APPROVER}  
          **Approved At:** ${NOW_TS}

          > Managerial approval for release promotion from STAGING to PROD.
          EOF

      - name: Populate STAGING templates and attach evidence
        if: ${{ steps.decide-staging.outputs.attach == 'true' }}
        run: |
          set -euo pipefail
          if ! command -v envsubst >/dev/null 2>&1; then sudo apt-get update -y && sudo apt-get install -y gettext-base; fi
          export NOW_TS=$(date -u +%Y-%m-%dT%H:%M:%SZ)
          export ENG_ID="ENG-$(( (${GITHUB_RUN_NUMBER:-0} + ${GITHUB_RUN_ATTEMPT:-0}) % 9000 + 1000 ))"
          export CHG_ID="CHG-$(( (${GITHUB_RUN_NUMBER:-0} * 10 + ${GITHUB_RUN_ATTEMPT:-0}) ))"
          export APPROVER="user-${GITHUB_ACTOR}-${GITHUB_RUN_ATTEMPT:-1}"

          cat > iac-evidence.json <<JSON
          {"iacScan": {"tool": "Snyk", "scanDate": "${NOW_TS}", "summary": { "critical": 0, "high": 1, "medium": 2, "low": 3 }, "repository": "${{ github.repository }}", "commit": "${{ github.sha }}"}}
          JSON
          envsubst < iac-evidence.template.md > iac-evidence.md
          jf evd create-evidence --predicate iac-evidence.json --markdown iac-evidence.md --predicate-type "https://snyk.io/evidence/iac/v1" --release-bundle "$APPLICATION_KEY" --release-bundle-version "$APP_VERSION" --project "${{ vars.PROJECT_KEY }}" --key "${{ secrets.EVIDENCE_PRIVATE_KEY }}" --key-alias "${{ vars.EVIDENCE_KEY_ALIAS }}" || echo "⚠️ IaC evidence attachment failed"

          cat > pentest-evidence.json <<JSON
          {"pentest": {"provider": "Cobalt.io", "engagementId": "${ENG_ID}", "completedAt": "${NOW_TS}", "summary": { "totalFindings": 1, "critical": 0, "high": 0, "medium": 1, "low": 0 }}}
          JSON
          envsubst < pentest-evidence.template.md > pentest-evidence.md
          jf evd create-evidence --predicate pentest-evidence.json --markdown pentest-evidence.md --predicate-type "https://cobalt.io/evidence/pentest/v1" --release-bundle "$APPLICATION_KEY" --release-bundle-version "$APP_VERSION" --project "${{ vars.PROJECT_KEY }}" --key "${{ secrets.EVIDENCE_PRIVATE_KEY }}" --key-alias "${{ vars.EVIDENCE_KEY_ALIAS }}" || echo "⚠️ Pentest evidence attachment failed"

          cat > change-approval.json <<JSON
          {"changeRequest": {"id": "${CHG_ID}", "status": "approved", "approvedBy": "${APPROVER}", "approvedAt": "${NOW_TS}", "environment": "STAGING"}}
          JSON
          envsubst < change-approval.template.md > change-approval.md
          jf evd create-evidence --predicate change-approval.json --markdown change-approval.md --predicate-type "https://servicenow.com/evidence/change-req/v1" --release-bundle "$APPLICATION_KEY" --release-bundle-version "$APP_VERSION" --project "${{ vars.PROJECT_KEY }}" --key "${{ secrets.EVIDENCE_PRIVATE_KEY }}" --key-alias "${{ vars.EVIDENCE_KEY_ALIAS }}" || echo "⚠️ Change approval evidence attachment failed"

      - name: Release to PROD (AppTrust Release)
        env:
          EVIDENCE_PRIVATE_KEY: ${{ secrets.EVIDENCE_PRIVATE_KEY }}
          EVIDENCE_KEY_ALIAS: ${{ vars.EVIDENCE_KEY_ALIAS }}
        run: |
          set -euo pipefail
          export JFROG_URL="${{ vars.JFROG_URL }}"; export PROJECT_KEY="${{ vars.PROJECT_KEY }}"; export JFROG_ADMIN_TOKEN="${{ secrets.JFROG_ADMIN_TOKEN }}"; source .github/scripts/promote_lib.sh
          fetch_summary
          if [[ "$(display_stage_for "${CURRENT_STAGE:-}")" == "STAGING" ]]; then
            ALLOW_RELEASE=true
            advance_one_step
          else
            echo "Skipping release: current stage is $(display_stage_for "${CURRENT_STAGE:-UNASSIGNED}")"
          fi

      - name: Generate promotion summary
        run: |
          echo "## 🚀 AppTrust Promotion Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "📄 Evidence Plan: see bookverse-demo-init/docs/EVIDENCE_PLAN.md" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Application:** $APPLICATION_KEY" >> $GITHUB_STEP_SUMMARY
          echo "**Version:** $APP_VERSION" >> $GITHUB_STEP_SUMMARY
          echo "**Started at:** ${CURRENT_STAGE_BEFORE}" >> $GITHUB_STEP_SUMMARY
          echo "**Promoted stages:** ${PROMOTED_STAGES:-none}" >> $GITHUB_STEP_SUMMARY
          echo "**Released to ${FINAL_STAGE}:** ${DID_RELEASE}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "Lifecycle final stage: ${FINAL_STAGE}" >> $GITHUB_STEP_SUMMARY

