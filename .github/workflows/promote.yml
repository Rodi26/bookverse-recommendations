name: Promote

on:
  workflow_dispatch:
    inputs:
      target_stage:
        description: 'Target stage (QA, STAGING, PROD)'
        required: true
        type: choice
        options: [ QA, STAGING, PROD ]
      app_version:
        description: 'Optional AppTrust application version (defaults to latest)'
        required: false
        type: string

jobs:
  promote:
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup JFrog CLI
        uses: jfrog/setup-jfrog-cli@v4

      - name: Configure JFrog URL
        run: |
          jf c add --interactive=false --url "${{ vars.JFROG_URL }}" --access-token "${{ secrets.JFROG_ACCESS_TOKEN }}"

      - name: Set variables and resolve application version
        run: |
          SERVICE_NAME=$(echo ${{ github.event.repository.name }} | sed 's/bookverse-//')
          REGISTRY_URL=$(echo "${{ vars.JFROG_URL }}" | sed 's|https://||' | sed 's|http://||')
          TARGET=${{ inputs.target_stage }}
          APPLICATION_KEY="bookverse-$SERVICE_NAME"

          if [[ -n "${{ inputs.app_version }}" ]]; then
            APP_VERSION="${{ inputs.app_version }}"
          else
            APP_VERSION=$(curl -s \
              "${{ vars.JFROG_URL }}/apptrust/api/v1/applications/$APPLICATION_KEY/versions?limit=1&order_by=created&order_asc=false" \
              -H "Authorization: Bearer ${{ secrets.JFROG_ACCESS_TOKEN }}" -H "Content-Type: application/json" | jq -r '.versions[0].version // empty')
          fi
          echo "SERVICE_NAME=$SERVICE_NAME" >> $GITHUB_ENV
          echo "REGISTRY_URL=$REGISTRY_URL" >> $GITHUB_ENV
          echo "APPLICATION_KEY=$APPLICATION_KEY" >> $GITHUB_ENV
          echo "APP_VERSION=$APP_VERSION" >> $GITHUB_ENV
          echo "TARGET=$TARGET" >> $GITHUB_ENV
          echo "Resolved AppTrust version: $APP_VERSION"

      - name: Resolve build number (image tag) from application version
        run: |
          BUILD_NUMBER=$(curl -s \
            "${{ vars.JFROG_URL }}/apptrust/api/v1/applications/${{ env.APPLICATION_KEY }}/versions/${{ env.APP_VERSION }}" \
            -H "Authorization: Bearer ${{ secrets.JFROG_ACCESS_TOKEN }}" -H "Content-Type: application/json" | jq -r '.sources.builds[0].number // empty')
          if [[ -z "$BUILD_NUMBER" || "$BUILD_NUMBER" == "null" ]]; then
            echo "Failed to resolve build number from AppTrust version" >&2; exit 1
          fi
          echo "BUILD_NUMBER=$BUILD_NUMBER" >> $GITHUB_ENV
          echo "Resolved build number: $BUILD_NUMBER"

      - name: Verify evidence gates (presence)
        run: |
          echo "Verifying evidence parity (coverage + SAST on packages; SDLC on app version)"
          # Placeholder checks: In a real setup, call AppTrust APIs to list evidence
          # For demo, we assume presence if version exists and build number resolved
          echo "Evidence checks passed (demo mode)"

      - name: Promote images across repositories
        run: |
          SRC_REPO="${{ vars.PROJECT_KEY }}-${{ env.SERVICE_NAME }}-docker-internal-local"
          case "${{ env.TARGET }}" in
            QA) DST_REPO="${{ vars.PROJECT_KEY }}-${{ env.SERVICE_NAME }}-docker-qa-local";;
            STAGING) DST_REPO="${{ vars.PROJECT_KEY }}-${{ env.SERVICE_NAME }}-docker-staging-local";;
            PROD) DST_REPO="${{ vars.PROJECT_KEY }}-${{ env.SERVICE_NAME }}-docker-prod-local";;
          esac

          for IMG in recommendations-api recommendations-worker; do
            SRC_PATH="$SRC_REPO/$IMG:${{ env.BUILD_NUMBER }}"
            DST_PATH="$DST_REPO/$IMG:${{ env.BUILD_NUMBER }}"
            echo "Promoting $IMG: $SRC_PATH -> $DST_PATH"
            jf rt cp "$SRC_PATH" "$DST_PATH" || jf rt move "$SRC_PATH" "$DST_PATH" || true
          done

      - name: Attach promotion evidence (application version)
        run: |
          cat <<EOF > promotion-evidence.json
          {
            "promotion": {
              "targetStage": "${{ env.TARGET }}",
              "approvedBy": "${{ github.actor }}",
              "approvedAt": "$(date -u +%Y-%m-%dT%H:%M:%SZ)",
              "changeRef": "DEMO-123",
              "buildNumber": "${{ env.BUILD_NUMBER }}"
            }
          }
          EOF

          cat > promotion-evidence.md <<EOF
          # Promotion Evidence

          - Target Stage: **${{ env.TARGET }}**
          - Approved By: **${{ github.actor }}**
          - Build Number: **${{ env.BUILD_NUMBER }}**
          - Change Ref: **DEMO-123**
          - Approved At: **$(date -u)**
          EOF

          jf evd create-evidence \
            --predicate promotion-evidence.json \
            --markdown promotion-evidence.md \
            --predicate-type "Promotion" \
            --release-bundle "${{ env.APPLICATION_KEY }}" \
            --release-bundle-version "${{ env.APP_VERSION }}" \
            --project "${{ vars.PROJECT_KEY }}" \
            --key "${{ secrets.EVIDENCE_PRIVATE_KEY }}" \
            --key-alias "${{ vars.EVIDENCE_KEY_ALIAS }}" || echo "Promotion evidence attach failed"

      - name: Attach IaC scan evidence (application version)
        run: |
          NOW_TS=$(date -u +%Y-%m-%dT%H:%M:%SZ)
          cat > iac-evidence.json <<JSON
          {"iac": {"tool": "Snyk", "status": "PASSED", "checkedAt": "${NOW_TS}"}}
          JSON
          cat > iac-evidence.template.md <<'EOF'
          # Snyk IaC Scan

          - Status: PASSED
          - Checked At: `${NOW_TS}` (UTC)
          EOF
          if ! command -v envsubst >/dev/null 2>&1; then sudo apt-get update -y && sudo apt-get install -y gettext-base; fi
          export NOW_TS
          envsubst < iac-evidence.template.md > iac-evidence.md
          jf evd create-evidence \
            --predicate iac-evidence.json \
            --markdown iac-evidence.md \
            --predicate-type "https://snyk.io/evidence/iac/v1" \
            --release-bundle "${{ env.APPLICATION_KEY }}" \
            --release-bundle-version "${{ env.APP_VERSION }}" \
            --project "${{ vars.PROJECT_KEY }}" \
            --key "${{ secrets.EVIDENCE_PRIVATE_KEY }}" \
            --key-alias "${{ vars.EVIDENCE_KEY_ALIAS }}" || echo "IaC evidence attach failed"

      - name: Attach pentest evidence (application version)
        run: |
          NOW_TS=$(date -u +%Y-%m-%dT%H:%M:%SZ)
          cat > pentest-evidence.json <<JSON
          {"pentest": {"vendor": "Cobalt", "status": "PASSED", "checkedAt": "${NOW_TS}"}}
          JSON
          cat > pentest-evidence.template.md <<'EOF'
          # Pentest Report (Cobalt)

          - Status: PASSED
          - Checked At: `${NOW_TS}` (UTC)
          EOF
          if ! command -v envsubst >/dev/null 2>&1; then sudo apt-get update -y && sudo apt-get install -y gettext-base; fi
          export NOW_TS
          envsubst < pentest-evidence.template.md > pentest-evidence.md
          jf evd create-evidence \
            --predicate pentest-evidence.json \
            --markdown pentest-evidence.md \
            --predicate-type "https://cobalt.io/evidence/pentest/v1" \
            --release-bundle "${{ env.APPLICATION_KEY }}" \
            --release-bundle-version "${{ env.APP_VERSION }}" \
            --project "${{ vars.PROJECT_KEY }}" \
            --key "${{ secrets.EVIDENCE_PRIVATE_KEY }}" \
            --key-alias "${{ vars.EVIDENCE_KEY_ALIAS }}" || echo "Pentest evidence attach failed"

      - name: Attach change approval evidence (application version)
        run: |
          NOW_TS=$(date -u +%Y-%m-%dT%H:%M:%SZ)
          cat > change-approval.json <<JSON
          {"changeApproval": {"system": "ServiceNow", "status": "APPROVED", "approvedAt": "${NOW_TS}"}}
          JSON
          cat > change-approval.template.md <<'EOF'
          # Change Approval (ServiceNow)

          - Status: APPROVED
          - Approved At: `${NOW_TS}` (UTC)
          EOF
          if ! command -v envsubst >/dev/null 2>&1; then sudo apt-get update -y && sudo apt-get install -y gettext-base; fi
          export NOW_TS
          envsubst < change-approval.template.md > change-approval.md
          jf evd create-evidence \
            --predicate change-approval.json \
            --markdown change-approval.md \
            --predicate-type "https://servicenow.com/evidence/change-req/v1" \
            --release-bundle "${{ env.APPLICATION_KEY }}" \
            --release-bundle-version "${{ env.APP_VERSION }}" \
            --project "${{ vars.PROJECT_KEY }}" \
            --key "${{ secrets.EVIDENCE_PRIVATE_KEY }}" \
            --key-alias "${{ vars.EVIDENCE_KEY_ALIAS }}" || echo "Change approval evidence attach failed"

      - name: Promotion summary
        run: |
          echo "## Promotion Summary" >> $GITHUB_STEP_SUMMARY
          echo "Application: \
\`${{ env.APPLICATION_KEY }}\`" >> $GITHUB_STEP_SUMMARY
          echo "Version: \
\`${{ env.APP_VERSION }}\`" >> $GITHUB_STEP_SUMMARY
          echo "Build Number: \
\`${{ env.BUILD_NUMBER }}\`" >> $GITHUB_STEP_SUMMARY
          echo "Target Stage: \
\`${{ env.TARGET }}\`" >> $GITHUB_STEP_SUMMARY
          echo "Promoted images: recommendations-api, recommendations-worker" >> $GITHUB_STEP_SUMMARY


