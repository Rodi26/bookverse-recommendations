name: Promote

on:
  workflow_dispatch:
    inputs:
      target_stage:
        description: 'Target stage (DEV, QA, STAGING, PROD)'
        required: true
        type: choice
        options: [ DEV, QA, STAGING, PROD ]
      app_version:
        description: 'Optional AppTrust application version (defaults to latest)'
        required: false
        type: string

jobs:
  promote:
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup JFrog CLI
        uses: jfrog/setup-jfrog-cli@v4
        env:
          JF_URL: ${{ vars.JFROG_URL }}
          JF_PROJECT: ${{ vars.PROJECT_KEY }}
        with:
          version: latest
          oidc-provider-name: github-bookverse-recommendations
          disable-job-summary: true
          oidc-audience: jfrog-github

      - name: Configure JFrog URL
        run: |
          jf c add --interactive=false --url "${{ vars.JFROG_URL }}" --access-token "${{ secrets.JFROG_ACCESS_TOKEN }}"

      - name: Set variables and resolve application version
        run: |
          SERVICE_NAME=$(echo ${{ github.event.repository.name }} | sed 's/bookverse-//')
          REGISTRY_URL=$(echo "${{ vars.JFROG_URL }}" | sed 's|https://||' | sed 's|http://||')
          TARGET=${{ inputs.target_stage }}
          APPLICATION_KEY="bookverse-$SERVICE_NAME"

          if [[ -n "${{ inputs.app_version }}" ]]; then
            APP_VERSION="${{ inputs.app_version }}"
          else
            APP_VERSION=$(curl -s \
              "${{ vars.JFROG_URL }}/apptrust/api/v1/applications/$APPLICATION_KEY/versions?limit=1&order_by=created&order_asc=false" \
              -H "Authorization: Bearer ${{ secrets.JFROG_ACCESS_TOKEN }}" -H "Content-Type: application/json" | jq -r '.versions[0].version // empty')
          fi
          echo "SERVICE_NAME=$SERVICE_NAME" >> $GITHUB_ENV
          echo "REGISTRY_URL=$REGISTRY_URL" >> $GITHUB_ENV
          echo "APPLICATION_KEY=$APPLICATION_KEY" >> $GITHUB_ENV
          echo "APP_VERSION=$APP_VERSION" >> $GITHUB_ENV
          echo "TARGET=$TARGET" >> $GITHUB_ENV
          echo "Resolved AppTrust version: $APP_VERSION"

      - name: Initialize promotion context
        run: |
          set -euo pipefail
          if [[ -n "${HTTP_DEBUG_LEVEL:-}" ]]; then :; else export HTTP_DEBUG_LEVEL=basic; fi
          export JFROG_URL="${{ vars.JFROG_URL }}"
          export PROJECT_KEY="${{ vars.PROJECT_KEY }}"
          export JFROG_ADMIN_TOKEN="${{ secrets.JFROG_ACCESS_TOKEN }}"
          source .github/scripts/promote_lib.sh
          echo "📦 Application: $APPLICATION_KEY"
          echo "🏷️ Version: $APP_VERSION"
          fetch_summary
          echo "CURRENT_STAGE_BEFORE=${CURRENT_STAGE:-UNASSIGNED}" >> $GITHUB_ENV
          echo "RELEASE_STATUS_BEFORE=${RELEASE_STATUS:-UNKNOWN}" >> $GITHUB_ENV
          LC_FILE=$(mktemp)
          CODE=$(curl -sS -L -o "$LC_FILE" -w "%{http_code}" "$JFROG_URL/access/api/v2/lifecycle/?project_key=$PROJECT_KEY" -H "Authorization: Bearer $JFROG_ADMIN_TOKEN" -H "Accept: application/json" || echo 000)
          if [[ "$CODE" -lt 200 || "$CODE" -ge 300 ]]; then
            echo "❌ Failed to fetch lifecycles list for project '$PROJECT_KEY' (HTTP $CODE)" >&2
            print_request_debug "GET" "$JFROG_URL/access/api/v2/lifecycle/?project_key=$PROJECT_KEY"
            cat "$LC_FILE" || true
            rm -f "$LC_FILE"
            exit 1
          fi
          NORM_FILE=$(mktemp)
          jq -c 'if type=="array" then . elif has("lifecycles") then .lifecycles elif has("items") then .items elif has("results") then .results elif (has("name") and has("stages")) then [.] else [] end' "$LC_FILE" > "$NORM_FILE" 2>/dev/null || printf '[]' > "$NORM_FILE"
          rm -f "$LC_FILE"
          LIFECYCLE_NAME="${LIFECYCLE_NAME:-bookverse-lifecycle}"
          NAMES=$(jq -r --arg n "$LIFECYCLE_NAME" 'map(select(.name == $n)) | .[0].stages // [] | map(if type=="object" then .name else . end) | .[]' "$NORM_FILE" 2>/dev/null || true)
          RELEASE_STAGE=$(jq -r --arg n "$LIFECYCLE_NAME" '([ .[] | select(.name == $n) | .releaseStage ] | .[0]) // empty' "$NORM_FILE" 2>/dev/null || true)
          STAGES=()
          while IFS= read -r orig; do [[ -z "$orig" ]] && continue; display=$(display_stage_for "$orig"); STAGES+=("$display"); done < <(printf "%s\n" "$NAMES")
          rm -f "$NORM_FILE"
          if [[ ${#STAGES[@]} -eq 0 ]]; then echo "ℹ️ Lifecycle '$LIFECYCLE_NAME' not found; using default stages (DEV QA STAGING PROD)" >&2; STAGES=(DEV QA STAGING PROD); fi
          if [[ -n "$RELEASE_STAGE" ]]; then FINAL_STAGE=$(display_stage_for "$RELEASE_STAGE"); else FINAL_STAGE="${STAGES[$((${#STAGES[@]}-1))]}"; fi
          echo "FINAL_STAGE=$FINAL_STAGE" >> $GITHUB_ENV
          STAGES_STR="${STAGES[*]}"; echo "STAGES_STR=$STAGES_STR" >> $GITHUB_ENV
          TS_INPUT="${{ inputs.target_stage }}"; TARGET_NAME="$TS_INPUT"; if [[ -z "$TARGET_NAME" ]]; then TARGET_NAME="$FINAL_STAGE"; fi
          echo "TARGET_NAME=$TARGET_NAME" >> $GITHUB_ENV
          echo "PROMOTED_STAGES=" >> $GITHUB_ENV
          echo "DID_RELEASE=false" >> $GITHUB_ENV

      - name: Promote from UNASSIGNED → next
        env:
          EVIDENCE_PRIVATE_KEY: ${{ secrets.EVIDENCE_PRIVATE_KEY }}
        run: |
          set -euo pipefail
          export JFROG_URL="${{ vars.JFROG_URL }}"; export PROJECT_KEY="${{ vars.PROJECT_KEY }}"; export JFROG_ADMIN_TOKEN="${{ secrets.JFROG_ACCESS_TOKEN }}"; source .github/scripts/promote_lib.sh
          fetch_summary
          if [[ -z "${CURRENT_STAGE:-}" || "$(display_stage_for "${CURRENT_STAGE}")" == "UNASSIGNED" ]]; then ALLOW_RELEASE=false; advance_one_step; else echo "Skipping: current stage is $(display_stage_for "${CURRENT_STAGE}")"; fi

      - name: Promote from DEV → next
        env:
          EVIDENCE_PRIVATE_KEY: ${{ secrets.EVIDENCE_PRIVATE_KEY }}
        run: |
          set -euo pipefail
          export JFROG_URL="${{ vars.JFROG_URL }}"; export PROJECT_KEY="${{ vars.PROJECT_KEY }}"; export JFROG_ADMIN_TOKEN="${{ secrets.JFROG_ACCESS_TOKEN }}"; source .github/scripts/promote_lib.sh
          fetch_summary
          if [[ "$(display_stage_for "${CURRENT_STAGE:-}")" == "DEV" ]]; then ALLOW_RELEASE=false; advance_one_step; else echo "Skipping: current stage is $(display_stage_for "${CURRENT_STAGE:-UNASSIGNED}")"; fi

      - name: Promote from QA → next
        env:
          EVIDENCE_PRIVATE_KEY: ${{ secrets.EVIDENCE_PRIVATE_KEY }}
        run: |
          set -euo pipefail
          export JFROG_URL="${{ vars.JFROG_URL }}"; export PROJECT_KEY="${{ vars.PROJECT_KEY }}"; export JFROG_ADMIN_TOKEN="${{ secrets.JFROG_ACCESS_TOKEN }}"; source .github/scripts/promote_lib.sh
          fetch_summary
          if [[ "$(display_stage_for "${CURRENT_STAGE:-}")" == "QA" ]]; then ALLOW_RELEASE=false; advance_one_step; else echo "Skipping: current stage is $(display_stage_for "${CURRENT_STAGE:-UNASSIGNED}")"; fi

      - name: Promote from STAGING → next
        env:
          EVIDENCE_PRIVATE_KEY: ${{ secrets.EVIDENCE_PRIVATE_KEY }}
        run: |
          set -euo pipefail
          export JFROG_URL="${{ vars.JFROG_URL }}"; export PROJECT_KEY="${{ vars.PROJECT_KEY }}"; export JFROG_ADMIN_TOKEN="${{ secrets.JFROG_ACCESS_TOKEN }}"; source .github/scripts/promote_lib.sh
          fetch_summary
          if [[ "$(display_stage_for "${CURRENT_STAGE:-}")" == "STAGING" ]]; then ALLOW_RELEASE=false; advance_one_step; else echo "Skipping: current stage is $(display_stage_for "${CURRENT_STAGE:-UNASSIGNED}")"; fi

      - name: Release to PROD
        env:
          EVIDENCE_PRIVATE_KEY: ${{ secrets.EVIDENCE_PRIVATE_KEY }}
        run: |
          set -euo pipefail
          export JFROG_URL="${{ vars.JFROG_URL }}"; export PROJECT_KEY="${{ vars.PROJECT_KEY }}"; export JFROG_ADMIN_TOKEN="${{ secrets.JFROG_ACCESS_TOKEN }}"; source .github/scripts/promote_lib.sh
          fetch_summary
          if [[ "$(display_stage_for "${CURRENT_STAGE:-}")" == "STAGING" ]]; then ALLOW_RELEASE=true; advance_one_step; else echo "Skipping release: current stage is $(display_stage_for "${CURRENT_STAGE:-UNASSIGNED}")"; fi

      # STAGING evidence steps are attached during transitions using the same
      # predicates and types as inventory; no extra ad-hoc promotion evidence.

      - name: Attach IaC scan evidence (application version)
        run: |
          NOW_TS=$(date -u +%Y-%m-%dT%H:%M:%SZ)
          cat > iac-evidence.json <<JSON
          {"iac": {"tool": "Snyk", "status": "PASSED", "checkedAt": "${NOW_TS}"}}
          JSON
          cat > iac-evidence.template.md <<'EOF'
          # Snyk IaC Scan

          - Status: PASSED
          - Checked At: `${NOW_TS}` (UTC)
          EOF
          if ! command -v envsubst >/dev/null 2>&1; then sudo apt-get update -y && sudo apt-get install -y gettext-base; fi
          export NOW_TS
          envsubst < iac-evidence.template.md > iac-evidence.md
          jf evd create-evidence \
            --predicate iac-evidence.json \
            --markdown iac-evidence.md \
            --predicate-type "https://snyk.io/evidence/iac/v1" \
            --release-bundle "${{ env.APPLICATION_KEY }}" \
            --release-bundle-version "${{ env.APP_VERSION }}" \
            --project "${{ vars.PROJECT_KEY }}" \
            --key "${{ secrets.EVIDENCE_PRIVATE_KEY }}" \
            --key-alias "${{ vars.EVIDENCE_KEY_ALIAS }}" || echo "IaC evidence attach failed"

      - name: Attach pentest evidence (application version)
        run: |
          NOW_TS=$(date -u +%Y-%m-%dT%H:%M:%SZ)
          cat > pentest-evidence.json <<JSON
          {"pentest": {"vendor": "Cobalt", "status": "PASSED", "checkedAt": "${NOW_TS}"}}
          JSON
          cat > pentest-evidence.template.md <<'EOF'
          # Pentest Report (Cobalt)

          - Status: PASSED
          - Checked At: `${NOW_TS}` (UTC)
          EOF
          if ! command -v envsubst >/dev/null 2>&1; then sudo apt-get update -y && sudo apt-get install -y gettext-base; fi
          export NOW_TS
          envsubst < pentest-evidence.template.md > pentest-evidence.md
          jf evd create-evidence \
            --predicate pentest-evidence.json \
            --markdown pentest-evidence.md \
            --predicate-type "https://cobalt.io/evidence/pentest/v1" \
            --release-bundle "${{ env.APPLICATION_KEY }}" \
            --release-bundle-version "${{ env.APP_VERSION }}" \
            --project "${{ vars.PROJECT_KEY }}" \
            --key "${{ secrets.EVIDENCE_PRIVATE_KEY }}" \
            --key-alias "${{ vars.EVIDENCE_KEY_ALIAS }}" || echo "Pentest evidence attach failed"

      - name: Attach change approval evidence (application version)
        run: |
          NOW_TS=$(date -u +%Y-%m-%dT%H:%M:%SZ)
          cat > change-approval.json <<JSON
          {"changeApproval": {"system": "ServiceNow", "status": "APPROVED", "approvedAt": "${NOW_TS}"}}
          JSON
          cat > change-approval.template.md <<'EOF'
          # Change Approval (ServiceNow)

          - Status: APPROVED
          - Approved At: `${NOW_TS}` (UTC)
          EOF
          if ! command -v envsubst >/dev/null 2>&1; then sudo apt-get update -y && sudo apt-get install -y gettext-base; fi
          export NOW_TS
          envsubst < change-approval.template.md > change-approval.md
          jf evd create-evidence \
            --predicate change-approval.json \
            --markdown change-approval.md \
            --predicate-type "https://servicenow.com/evidence/change-req/v1" \
            --release-bundle "${{ env.APPLICATION_KEY }}" \
            --release-bundle-version "${{ env.APP_VERSION }}" \
            --project "${{ vars.PROJECT_KEY }}" \
            --key "${{ secrets.EVIDENCE_PRIVATE_KEY }}" \
            --key-alias "${{ vars.EVIDENCE_KEY_ALIAS }}" || echo "Change approval evidence attach failed"

      - name: Generate promotion summary
        run: |
          echo "## 🚀 AppTrust Promotion Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "📄 Evidence Plan: see bookverse-demo-init/docs/EVIDENCE_PLAN.md" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Application:** $APPLICATION_KEY" >> $GITHUB_STEP_SUMMARY
          echo "**Version:** $APP_VERSION" >> $GITHUB_STEP_SUMMARY
          echo "**Started at:** ${CURRENT_STAGE_BEFORE}" >> $GITHUB_STEP_SUMMARY
          echo "**Promoted stages:** ${PROMOTED_STAGES:-none}" >> $GITHUB_STEP_SUMMARY
          echo "**Released to ${FINAL_STAGE}:** ${DID_RELEASE}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "Lifecycle final stage: ${FINAL_STAGE}" >> $GITHUB_STEP_SUMMARY


