name: Build & Test

on:
  workflow_call:
    inputs:
      service-name:
        description: 'Name of the service being built'
        required: true
        type: string
      python-version:
        description: 'Python version to use'
        required: false
        type: string
        default: '3.11'
      skip-tests:
        description: 'Skip running tests'
        required: false
        type: boolean
        default: false
      skip-docker:
        description: 'Skip Docker build and push'
        required: false
        type: boolean
        default: false
      create-app-version:
        description: 'Create application version in JFrog'
        required: false
        type: boolean
        default: true
    outputs:
      semver:
        description: 'Generated semantic version'
        value: ${{ jobs.build.outputs.version }}
      build-name:
        description: 'JFrog build name'
        value: ${{ jobs.build.outputs.build-name }}
      build-number:
        description: 'JFrog build number'
        value: ${{ jobs.build.outputs.build-number }}

jobs:
  build:
    name: "Build, Test & Publish"
    runs-on: ubuntu-latest
    permissions:
      contents: read
      id-token: write
    outputs:
      version: ${{ steps.semver.outputs.version }}
      build-name: ${{ steps.build-vars.outputs.build-name }}
      build-number: ${{ steps.build-vars.outputs.build-number }}
    
    steps:
      - name: "üì• Checkout Code"
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: "üêç Setup Python"
        uses: actions/setup-python@v4
        with:
          python-version: ${{ inputs.python-version }}

      - name: "üìã Build Variables"
        id: build-vars
        run: |
          BUILD_NAME="${{ vars.PROJECT_KEY }}-${{ inputs.service-name }}"
          BUILD_NUMBER="${{ github.run_number }}"
          echo "build-name=$BUILD_NAME" >> $GITHUB_OUTPUT
          echo "build-number=$BUILD_NUMBER" >> $GITHUB_OUTPUT
          echo "BUILD_NAME=$BUILD_NAME" >> $GITHUB_ENV
          echo "BUILD_NUMBER=$BUILD_NUMBER" >> $GITHUB_ENV

      - name: "üîß Setup JFrog CLI"
        uses: EyalDelarea/setup-jfrog-cli@swampUpAppTrust
        with:
          version: latest
          disable-job-summary: true
          disable-auto-build-publish: true
          disable-auto-evidence-collection: false
        env:
          JF_URL: ${{ vars.JFROG_URL }}
          JF_PROJECT: ${{ vars.PROJECT_KEY }}

      - name: "üîê JFrog OIDC Authentication"
        run: |
          echo "üîê Configuring JFrog CLI with OIDC..."
          jf config add --url="${{ vars.JFROG_URL }}" --project="${{ vars.PROJECT_KEY }}" --oidc-provider-name="${{ vars.PROJECT_KEY }}-${{ inputs.service-name }}-github" --interactive=false
          jf rt ping
          echo "‚úÖ JFrog authentication successful"

      - name: "üîê Docker OIDC Login"
        run: |
          echo "üê≥ Performing Docker login with OIDC token..."
          
          # Get OIDC token
          OIDC_TOKEN=$(curl -s -H "Authorization: bearer $ACTIONS_ID_TOKEN_REQUEST_TOKEN" \
            "$ACTIONS_ID_TOKEN_REQUEST_URL&audience=${{ vars.JFROG_URL }}" | jq -r '.value')
          
          # Exchange for JFrog access token
          TOKEN_RESPONSE=$(curl -s -X POST "${{ vars.JFROG_URL }}/access/api/v1/oidc/token" \
            -H "Content-Type: application/json" \
            -d "{\"grant_type\": \"urn:ietf:params:oauth:grant-type:token-exchange\", \"subject_token\": \"$OIDC_TOKEN\", \"subject_token_type\": \"urn:ietf:params:oauth:token-type:id_token\", \"provider_name\": \"${{ vars.PROJECT_KEY }}-${{ inputs.service-name }}-github\"}")
          
          JF_OIDC_TOKEN=$(echo "$TOKEN_RESPONSE" | jq -r '.access_token')
          
          # Docker login (using inventory service pattern)
          b64pad() { local l=${#1}; local m=$((l % 4)); if [ $m -eq 2 ]; then echo "$1=="; elif [ $m -eq 3 ]; then echo "$1="; else echo "$1"; fi; }
          PAY=$(echo "$JF_OIDC_TOKEN" | cut -d. -f2 || true)
          PAY_PAD=$(b64pad "$PAY")
          CLAIMS=$(echo "$PAY_PAD" | tr '_-' '/+' | base64 -d 2>/dev/null || true)
          DOCKER_USER=$(echo "$CLAIMS" | jq -r '.username // .sub // .subject // empty' 2>/dev/null || true)
          
          if [[ "$DOCKER_USER" == *"/users/"* ]]; then
            DOCKER_USER=${DOCKER_USER##*/users/}
          fi
          if [[ -z "$DOCKER_USER" || "$DOCKER_USER" == "null" ]]; then 
            DOCKER_USER="oauth2_access_token"
          fi
          
          REGISTRY_URL="${{ vars.DOCKER_REGISTRY }}"
          echo "$JF_OIDC_TOKEN" | docker login "$REGISTRY_URL" -u "$DOCKER_USER" --password-stdin
          echo "‚úÖ Docker registry authenticated"

      - name: "üè∑Ô∏è Generate Version"
        id: semver
        run: |
          VERSION="1.0.$(git rev-list --count HEAD)"
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "IMAGE_TAG=$VERSION" >> $GITHUB_ENV
          echo "‚úÖ Generated version: $VERSION"

      - name: "üì¶ Install Dependencies"
        run: |
          pip install --upgrade pip
          pip install PyYAML pytest pytest-cov
          
          # Configure JFrog PyPI
          jf pip-config --repo-resolve="${{ vars.PROJECT_KEY }}-pypi-virtual"
          
          # Install bookverse-core if exists
          if [ -d "libs/bookverse-core" ]; then
            pip install -e ./libs/bookverse-core
          fi
          
          # Install requirements
          if [ -f "requirements.txt" ]; then
            jf pip install -r requirements.txt || pip install -r requirements.txt
          fi

      - name: "üß™ Run Tests"
        if: ${{ !inputs.skip-tests }}
        run: |
          if [ -d "app/" ]; then
            COVERAGE_TARGET="app"
          elif [ -d "src/" ]; then
            COVERAGE_TARGET="src"
          else
            COVERAGE_TARGET="."
          fi
          
          pytest tests/ -v --cov=$COVERAGE_TARGET --cov-report=term-missing --cov-report=xml

      - name: "üê≥ Build & Push Docker Image"
        if: ${{ !inputs.skip-docker }}
        run: |
          if [ -f "Dockerfile" ]; then
            # Use inventory service Docker pattern (CRITICAL)
            SERVICE_NAME="${{ inputs.service-name }}"
            IMAGE_TAG="${{ steps.semver.outputs.version }}"
            REPO_KEY="${{ vars.PROJECT_KEY }}-$SERVICE_NAME-internal-docker-nonprod-local"
            REGISTRY_URL="${{ vars.DOCKER_REGISTRY }}"
            IMAGE_NAME="$REGISTRY_URL/$REPO_KEY/$SERVICE_NAME:$IMAGE_TAG"
            
            echo "Building: $IMAGE_NAME"
            jf docker build --pull -t "$IMAGE_NAME" --build-name "$BUILD_NAME" --build-number "$BUILD_NUMBER" .
            
            # Push image
            docker push "$IMAGE_NAME"
            echo "‚úÖ Docker image pushed: $IMAGE_NAME"
            
            # Add to build-info with SHA256 digest
            DIGEST=$(docker inspect "$IMAGE_NAME" --format='{{index .RepoDigests 0}}' 2>/dev/null | awk -F@ '{print $2}')
            if [[ -z "$DIGEST" || "$DIGEST" == "<no value>" ]]; then
              docker pull "$IMAGE_NAME" >/dev/null 2>&1 || true
              DIGEST=$(docker inspect "$IMAGE_NAME" --format='{{index .RepoDigests 0}}' 2>/dev/null | awk -F@ '{print $2}')
            fi
            echo "${IMAGE_NAME%@*}@${DIGEST}" > images.txt
            
            jf rt build-docker-create "$REPO_KEY" \
              --image-file images.txt \
              --build-name "$BUILD_NAME" \
              --build-number "$BUILD_NUMBER"
          fi

      - name: "üìã Publish Build Info"
        if: github.ref == 'refs/heads/main'
        run: |
          jf rt build-publish "$BUILD_NAME" "$BUILD_NUMBER"

      - name: "üõ°Ô∏è Create AppTrust Application Version"
        if: ${{ inputs.create-app-version && github.ref == 'refs/heads/main' }}
        run: |
          echo "üõ°Ô∏è Creating AppTrust application version"
          
          # FIXED: Use 'jf ap' not 'jf app' for AppTrust commands
          jf ap create-version \
            --app-key="${{ vars.PROJECT_KEY }}-${{ inputs.service-name }}" \
            --version="${{ steps.semver.outputs.version }}" \
            --build-name="$BUILD_NAME" \
            --build-number="$BUILD_NUMBER" \
            --project="${{ vars.PROJECT_KEY }}"
          
          echo "‚úÖ AppTrust application version created"
