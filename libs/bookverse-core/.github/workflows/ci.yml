name: BookVerse Core Library CI


on:
  workflow_dispatch:
    inputs:
      reason:
        description: 'Reason for manual CI trigger'
        required: false
        default: 'Manual testing of bookverse-core library'
        type: string
  push:
    branches: [ main, develop ]
    paths:
      - 'bookverse_core/**'
      - 'app/**'
      - 'tests/**'
      - 'requirements*.txt'
      - 'pyproject.toml'
      - '.github/workflows/ci.yml'
  pull_request:
    branches: [ main, develop ]
    paths:
      - 'bookverse_core/**'
      - 'app/**'
      - 'tests/**'
      - 'requirements*.txt'
      - 'pyproject.toml'

env:
  PYTHON_VERSION: "3.11"
  SERVICE_NAME: "bookverse-core"
  LIBRARY_NAME: "bookverse-core"

jobs:
  test:
    name: Test Library
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.11", "3.12"]
    
    steps:
      - name: "[Setup] Checkout"
        uses: actions/checkout@v4
      
      - name: "[Setup] Python ${{ matrix.python-version }}"
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}
          cache: 'pip'
      
      - name: "[Setup] Install dependencies"
        run: |
          echo "üì¶ Installing Python dependencies..."
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install -r requirements-dev.txt
          pip install -e .
          echo "‚úÖ Dependencies installed"
      
      - name: "[Test] Run unit tests"
        run: |
          echo "üß™ Running unit tests..."
          pytest tests/unit/ -v --tb=short --cov=bookverse_core --cov-report=xml --cov-report=term-missing
          echo "‚úÖ Unit tests completed"
      
      - name: "[Test] Run integration tests"
        run: |
          echo "üîó Running integration tests..."
          pytest tests/integration/ -v --tb=short
          echo "‚úÖ Integration tests completed"
      
      - name: "[Test] Generate coverage report"
        id: coverage
        run: |
          echo "üìä Generating coverage report..."
          coverage report --format=total > coverage_total.txt
          COVERAGE_PERCENT=$(cat coverage_total.txt)
          echo "coverage_percent=$COVERAGE_PERCENT" >> $GITHUB_OUTPUT
          echo "üìà Coverage: ${COVERAGE_PERCENT}%"
          
          if (( $(echo "$COVERAGE_PERCENT >= 80" | bc -l) )); then
            echo "‚úÖ Coverage target met (80%+)"
          else
            echo "‚ö†Ô∏è Coverage below target (80%): ${COVERAGE_PERCENT}%"
          fi
      
      - name: "[Quality] Code linting"
        run: |
          echo "üîç Running code linting..."
          ruff check bookverse_core/ app/ --output-format=github
          echo "‚úÖ Linting completed"
      
      - name: "[Quality] Type checking"
        run: |
          echo "üîç Running type checking..."
          mypy bookverse_core/ --ignore-missing-imports
          echo "‚úÖ Type checking completed"
      
      - name: "[Upload] Coverage to Codecov"
        if: matrix.python-version == '3.11'
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage.xml
          flags: unittests
          name: bookverse-core-coverage
          fail_ci_if_error: false

  build-demo:
    name: Build Demo Application
    runs-on: ubuntu-latest
    needs: test
    
    steps:
      - name: "[Setup] Checkout"
        uses: actions/checkout@v4
      
      - name: "[Setup] Docker Buildx"
        uses: docker/setup-buildx-action@v3
      
      - name: "[Build] Demo application image"
        run: |
          echo "üê≥ Building demo application Docker image..."
          IMAGE_TAG=$(echo $GITHUB_SHA | head -c7)
          docker build -t bookverse-core-demo:$IMAGE_TAG .
          docker tag bookverse-core-demo:$IMAGE_TAG bookverse-core-demo:latest
          echo "‚úÖ Demo image built: bookverse-core-demo:$IMAGE_TAG"
      
      - name: "[Test] Demo application"
        run: |
          echo "üß™ Testing demo application..."
          docker run -d --name demo-test -p 8000:8000 bookverse-core-demo:latest
          
          sleep 10
          
          curl -f http://localhost:8000/health || exit 1
          curl -f http://localhost:8000/demo/info || exit 1
          curl -f http://localhost:8000/demo/summary || exit 1
          
          docker stop demo-test
          docker rm demo-test
          
          echo "‚úÖ Demo application tests passed"

  package:
    name: Package Library
    runs-on: ubuntu-latest
    needs: [test, build-demo]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
      - name: "[Setup] Checkout"
        uses: actions/checkout@v4
      
      - name: "[Setup] Python"
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
      
      - name: "[Setup] Build tools"
        run: |
          python -m pip install --upgrade pip
          pip install build twine
      
      - name: "[Version] Set version"
        id: version
        run: |
          VERSION="0.1.0.dev$(date +%Y%m%d%H%M%S)"
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "üì¶ Package version: $VERSION"
          
          sed -i "s/version = \"0.1.0\"/version = \"$VERSION\"/" pyproject.toml
      
      - name: "[Build] Python package"
        run: |
          echo "üì¶ Building Python package..."
          python -m build
          echo "‚úÖ Package built"
          
          ls -la dist/
      
      - name: "[Validate] Package"
        run: |
          echo "üîç Validating package..."
          twine check dist/*
          echo "‚úÖ Package validation passed"
      
      - name: "[Upload] Package artifacts"
        uses: actions/upload-artifact@v3
        with:
          name: python-package
          path: dist/
          retention-days: 30

  validate-integration:
    name: Validate Library Integration
    runs-on: ubuntu-latest
    needs: package
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
      - name: "[Setup] Checkout"
        uses: actions/checkout@v4
      
      - name: "[Setup] Python"
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
      
      - name: "[Download] Package"
        uses: actions/download-artifact@v3
        with:
          name: python-package
          path: dist/
      
      - name: "[Test] Install from package"
        run: |
          echo "üì¶ Testing installation from built package..."
          pip install dist/*.whl
          echo "‚úÖ Package installed successfully"
      
      - name: "[Test] Import library"
        run: |
          echo "üîç Testing library imports..."
          python -c "
          import bookverse_core
          from bookverse_core.auth import AuthUser, validate_jwt_token
          from bookverse_core.config import BaseConfig, ConfigLoader
          from bookverse_core.api import create_app
          from bookverse_core.database import get_db_session_maker
          from bookverse_core.utils import setup_logging
          print('‚úÖ All imports successful')
          "
      
      - name: "[Test] Demo application with installed package"
        run: |
          echo "üß™ Testing demo app with installed package..."
          rm -rf bookverse_core/
          
          cd app/
          python -c "
          from main import app
          print('‚úÖ Demo app imports successful with installed package')
          "

  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: test
    
    steps:
      - name: "[Setup] Checkout"
        uses: actions/checkout@v4
      
      - name: "[Setup] Python"
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
      
      - name: "[Security] Install security tools"
        run: |
          pip install safety bandit
      
      - name: "[Security] Check dependencies"
        run: |
          echo "üîí Checking dependencies for security vulnerabilities..."
          safety check --json || true
          echo "‚úÖ Dependency security check completed"
      
      - name: "[Security] Static analysis"
        run: |
          echo "üîí Running static security analysis..."
          bandit -r bookverse_core/ -f json -o bandit-report.json || true
          echo "‚úÖ Static security analysis completed"
      
      - name: "[Upload] Security reports"
        uses: actions/upload-artifact@v3
        with:
          name: security-reports
          path: |
            bandit-report.json
          retention-days: 30

  demo-validation:
    name: Demo Validation
    runs-on: ubuntu-latest
    needs: [test, build-demo]
    
    steps:
      - name: "[Setup] Checkout"
        uses: actions/checkout@v4
      
      - name: "[Setup] Python"
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
      
      - name: "[Setup] Install library"
        run: |
          pip install -r requirements.txt
          pip install -e .
      
      - name: "[Demo] Comprehensive endpoint testing"
        run: |
          echo "üéØ Running comprehensive demo validation..."
          
          cd app/
          python main.py &
          APP_PID=$!
          
          sleep 5
          
          echo "Testing demo endpoints..."
          
          curl -f http://localhost:8000/health
          curl -f http://localhost:8000/info
          curl -f http://localhost:8000/demo/info
          curl -f http://localhost:8000/demo/summary
          
          curl -f http://localhost:8000/demo/config/current
          
          curl -f http://localhost:8000/demo/auth/public
          curl -f http://localhost:8000/demo/auth/optional
          
          curl -f "http://localhost:8000/demo/pagination/items?page=1&per_page=2"
          
          curl -f http://localhost:8000/demo/validation/test
          
          curl -f http://localhost:8000/demo/logging/test
          
          curl -f http://localhost:8000/demo/middleware/demo
          
          curl -f http://localhost:8000/demo/responses/demo
          
          curl -f http://localhost:8000/health/live
          curl -f http://localhost:8000/health/ready
          curl -f http://localhost:8000/demo/health/detailed
          
          kill $APP_PID
          
          echo "‚úÖ All demo endpoints validated successfully"

  summary:
    name: CI Summary
    runs-on: ubuntu-latest
    needs: [test, build-demo, package, validate-integration, security-scan, demo-validation]
    if: always()
    
    steps:
      - name: "[Summary] CI Results"
        run: |
          echo "üéâ BookVerse Core Library CI Summary"
          echo "=================================="
          echo ""
          echo "üìä Job Results:"
          echo "  Test: ${{ needs.test.result }}"
          echo "  Build Demo: ${{ needs.build-demo.result }}"
          echo "  Package: ${{ needs.package.result }}"
          echo "  Integration Validation: ${{ needs.validate-integration.result }}"
          echo "  Security Scan: ${{ needs.security-scan.result }}"
          echo "  Demo Validation: ${{ needs.demo-validation.result }}"
          echo ""
          
          if [[ "${{ needs.test.result }}" == "success" && "${{ needs.build-demo.result }}" == "success" && "${{ needs.demo-validation.result }}" == "success" ]]; then
            echo "‚úÖ Core validation successful - Library ready for service migration!"
            echo ""
            echo "üéØ Next Steps:"
            echo "  1. Review test coverage and demo functionality"
            echo "  2. Validate library eliminates expected code duplication"
            echo "  3. Begin pilot migration with inventory service"
            echo "  4. Measure actual code reduction and consistency improvements"
          else
            echo "‚ùå Some validations failed - Please review and fix issues"
          fi
